let t = 0;
let step = 0.01;
let n;
let size = 100;
let myColor;
let radiusDist = [];

function setup() {
  createCanvas(windowWidth, windowHeight);
  colorMode(HSB, 1);
  noStroke();
  
  if (random(1) < 0.1) {
    myColor = color(0.55, 0.6, 1, 0.67); // light blue, shiny!
  } else {
    myColor = color(0.81, 0.6, 1, 0.67); //light purple
  }
  n = floor((2 * PI) / step);
  
  radiusDist.length = n;
  radiusDist.fill(size);
}

function draw() {
  background(0.98);
  
  fill(myColor);
  blob(radiusDist, width/2, height/2, 0.7, t);
  drawFace(t);
  
  t += 0.005;
}

// Creates and draws a blob
// size is the distribution of the radius (before noise) for each angle
// (xCenter, yCenter) is the position of the center of the blob
// k is the tightness of the blob (0 = perfect circle)
// t is the time
function blob(size, xCenter, yCenter, k, t) {
  beginShape();
  for (let i = 0; i < n; i++) {
    let theta = i * step;
    let r1, r2;
    if (theta < PI / 2) {
      r1 = cos(theta);
      r2 = 1;
    } else if (theta < PI) {
      r1 = 0;
      r2 = sin(theta);
    } else if (theta < 3 * PI / 2) {
      r1 = sin(theta);
      r2 = 0;
    } else {
      r1 = 1;
      r2 = cos(theta);
    }
    let r = size[i] + noise(k * r1, k * r2, t) * (2/3) * size[i];
    let x = xCenter + r * cos(theta);
    let y = yCenter + r * sin(theta);
    curveVertex(x, y);
  }
  endShape();
}
